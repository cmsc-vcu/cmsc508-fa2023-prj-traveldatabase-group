# Problem Descripton

Problem Domain - Billing and Payments, Package Tours, Reviews and Ratings. Implementing shopping cart functionality, handling payment gateways, managing vendor inventories, and providing customer support features.

Need - To help tourist make better plans with low cost; to help them know what to expect, etc.

Context - Tourists

# User roles and use cases:
## User Roles:

1. Travelers:
 * Needs:
    * View and choose travel packages
    * Make a payment for their trips
    * Leave reviews for trips and hotels
    * Update their personal details
    * View their booking details and itinerary
 * Use:
    * A user-friendly interface to explore available travel packages
    * Secure payment gateways
    * Profile management options
    * Feedback and review forms

2. Travel Agents:
 * Needs:
    * Create and update travel packages
    * View clients' details and their preferences
    * Handle and manage bookings
    * Contact travelers with details of their trips
 * Use:
    * A dashboard to manage and create travel packages
    * Client management tools
    * Reporting tools for sales, feedback, and client data

3. Agency Admins/Managers:
 * Needs:
    * Oversee all the travel agents and their activities
    * Financial overview (earnings, refunds, payments)
    * Monitor and respond to client feedback
    * Access to analytics and reports (sales, popular destinations, etc.)
 * Use:
    * An advanced dashboard with managerial tools
    * Financial reporting tools
    * Analytics and business insights

## User Cases:

1. Travelers:
    * Browse through available travel packages
    * Make online reservations and payments
    * Access trip details and itineraries
    * Provide feedback post-trip

2. Travel Agents:
    * Design and update travel packages
    * Address specific requests of travelers
    * View the traveler's history and preferences to offer personalized packages

3. Agency Admins/Managers:
    * Generate monthly/quarterly reports on sales and revenue
    * Evaluate performance of travel agents
    * Analyze feedback to enhance service quality

## Connected & Integration:

1. Website and Mobile App:
    * The database will be the backend for the agency's website and mobile application. Travelers can view packages, make bookings, and provide feedback via these platforms

2. Payment Gateways:
    * The database will integrate with payment gateways to handle payments. The payment information (without sensitive data) will be stored in the database, linking to specific bookings and trips

3. External Review Platforms:
    * If the agency wants to showcase reviews from platforms like TripAdvisor, integration can be done. This will pull data into the agency's platform or push feedback from the agency's platform to the external site

4. Email and Messaging Services:
    * The system may connect to email platforms or messaging services to send automated confirmations, reminders, and promotional offers
    
# Security and Privacy:
1. User Authentication:
    * Concern: Unauthorized access can lead to data breaches, and fake accounts can spam with system

2. Data Encryption:
    * Concern: Data intercepted during transmission or directly from the database could be read and misused

3. Access Controls:
    * Concern: Users with excessive permissions could misuse data or functionalities, either accidentally or maliciously

# Entity -relationship diagram (ERD)
### Conceptual design in Crows foot notation
::: {.column}
```{mermaid}
erDiagram
Agency ||--|{ Agent : Work
Agent ||--|{ Package : Design
Package }|--|{ Destination: Consist
Package }|--|{ Travel: Consist
Trip }|--|| Package: Associate
Trip }|--|| Traveler: Associate
Destination ||--|{ Hotels: Have
Traveler ||--|| Payment: Generate
Agency ||--|{ Payment: Accepts
Traveler }|--|{ Review: Give
Review }|--|| Trip: Recive
Review }|--|| Hotels: Recive


Traveler{
    Primary TravelerID
    string FirstName
    string LastName
    string DateOfBirth
    string Email
    int Phone
    string Address
    float Budget
}

Agent{
    Primary AgentID
    string FirstName
    string LastName
    string Email
    int Phone
    float ExperienceYears
    string Specialization
}

Agency{
    Primary AgencyID
    stirng AgencyName
    string Location
    int ContactInfo
}

Destination{
    Primary DestinationID
    string Name
    string Country
    string City
    string Description
    string PopularAttractions
    float AverageCost
}

Hotels{
    Primary HotelID
    string Name
    string Address
    float CostPerNight
    string Amentities
}

Travel{
    Primary TravelID
    string Type
    string DepartureLocation
    string ArrivalLocation
    string DepartureDate
    string ArrivalDate
    float Cost
    string Provider
}

Package{
    Primary PackageID
    string PackageName
    float TotalCost
    int Duration
    string Description
}

Trip{
    Primary TripID
    string BookingDate
    string StartDate
    string EndDate
}

Payment{
    Primary PaymentID
    Foreign TravelerID
    Foreign AgencyID
    float Amount
    string PaymentDate
    string PaymentMethod
}

Review{
    Primary ReviewID
    Foreign TravelerID
    Foreign TripID
    Foreign HotelID
    float Rating
    string FeedBack
}
```
:::


### Relation Schemas

The following are the initial relation schemas for the system:

* Traveler( <ins>TravelerID</ins>, FirstName, LastName, DateOfBirth, Email, Phone, Address, Budget )
* Agent( <ins>AgentID</ins>, FirstName, LastName, Email, Phone, ExperienceYears, Specialization )
* Agency( <ins>AgencyID</ins>, AgencyName, Location, ContactInfo )
* Destination( <ins>DestinationID</ins>, Name, Country, City, Description, PopularAttractions )
* Hotels( <ins>HotelID</ins>, Name, Address, CostPerNight, Amentities )
* Travel( <ins>TravelID</ins>, Type, DepartureLocation, ArrivalLocation, DepartureDate, ArrivalDate, Cost, Provider )
* Package( <ins>PackageID</ins>, PackageName, TotalCost, Duration, Description )
* Trip( <ins>TripID</ins>, BookingDate, StartDate, EndDate )
* Payement( <ins>PaymentID</ins>, TravelerID(Foreign Key), AgencyID(Foreign Key), Amount, PaymentDate, PaymentMethod )
* Review( <ins>ReviewID</ins>, TravelerID(Foreign Key), TripID(Foreign Key), HotelID(Foreign Key), Rating, FeedBack )

# Sample Data
## Traveler
| TravelerID | FirstName | LastName | Email               | Phone     | DateOfBirth| Address                              | Budget |
|------------|:---------:|:--------:|:-------------------:|:---------:|:----------:|:------------------------------------:|:------:|
| 1          | John      | Doe      | john.doe@email.com  | 1234567890| 1990-05-15 | 321 SomeWhere Road, Tampa, FL, 33592 | 14790.5|
| 2          | Jane      | Smith    | jane.smith@email.com| 0987654321| 1985-08-20 | 123 Another Ave, Chicago, IL, 60016  | 7420   |
| 3          | Elzat     | Joe      | Elzat.joe@email.com | 4356792210| 2000-01-01 | 345 IDk St, Richmond, VA, 23220      | 9999   |

## Agent
| AgentID | FirstName | LastName | Email                 | Phone      | ExperienceYears | Specialization |
|---------|:---------:|:--------:|:---------------------:|:----------:|:---------------:|:--------------:|
| 45      | Robet     | Steward  | Robert.Stew@email.com | 3214562213 | 2               | European Tours |
| 46      | James     | Brown    | James.Brown@email.com | 5612312312 | 7               | Asian Tours    |
| 47      | Nijat     | Mahmud   | Nijat.Mahmud@email.com| 6753214431 | 10              | American Tours |

## Agency
| AgencyID | AgencyName | Location                                | ContactInfo | 
|--------|:----------:|:---------------------------------------:|:-----------:|
| 7      | SafeTrav   | 001 lmk google lane, LA, CA, 11220      | 8900204431  |
| 23     | GoodLuck   | 010 IHateWrttingAddress Blvd, TX, 78902 | 8402703348  |
| 156    | HaveFun    | 190 SomeOneHelpMe street, GA, 663220    | 6715541230  |

## Destination

| DestinationID | Name       | Country  | City   | Description                              | PopularAttractions                |
|---------------|------------|----------|--------|------------------------------------------|-----------------------------------|
| 1             | Paris      | France  | Paris  | The city of love.                        | Eiffel Tower, Louvre              |
| 2             | Tokyo      | Japan   | Tokyo  | A technological hub.                     | Tokyo Tower, Senso-ji Temple      |
| 3             | New York   | USA     | NY     | The city that never sleeps.              | Statue of Liberty, Central Park   |

## Hotels

| HotelID | Name            | Address                | CostPerNight | Amentities                           |
|---------|-----------------|------------------------|--------------|--------------------------------------|
| 1       | Parisian Palace | 123 Paris St.          | 150          | Free WiFi, Breakfast                 |
| 2       | Tokyo Tower Inn | 456 Tokyo Lane         | 100          | Free WiFi, Gym Access                |
| 3       | NY Central      | 789 New York Ave       | 200          | Pool, Breakfast, Free WiFi           |

## Travel

| TravelID | Type      | DepartureLocation | ArrivalLocation | DepartureDate | ArrivalDate | Cost | Provider         |
|----------|-----------|-------------------|-----------------|---------------|-------------|------|------------------|
| 1        | Flight    | New York          | Paris           | 2023-11-01    | 2023-11-02  | 300  | AirFrance        |
| 2        | Flight    | Tokyo             | Paris           | 2023-12-01    | 2023-12-02  | 250  | JapanAirlines    |
| 3        | Flight    | New York          | Tokyo           | 2023-12-10    | 2023-12-11  | 400  | AmericanAirlines |

## Package

| PackageID | PackageName     | TotalCost | Duration | Description                                  |
|-----------|-----------------|-----------|----------|----------------------------------------------|
| 1         | Paris Delight   | 500       | 7 days   | Explore the city of love in a week.          |
| 2         | Tokyo Trip      | 450       | 5 days   | Dive deep into Tokyo's culture.              |
| 3         | NY Adventure    | 600       | 6 days   | Discover the heart of the Big Apple.         |

## Trip

| TripID | BookingDate | StartDate  | EndDate    |
|--------|-------------|------------|------------|
| 1      | 2023-10-01  | 2023-11-01 | 2023-11-07 |
| 2      | 2023-10-20  | 2023-12-01 | 2023-12-05 |
| 3      | 2023-11-05  | 2023-12-10 | 2023-12-16 |

## Payment

| PaymentID | TravelerID | AgencyID | Amount | PaymentDate | PaymentMethod   |
|-----------|------------|----------|--------|-------------|-----------------|
| 1         | 1          | 1        | 500    | 2023-10-01  | Credit Card     |
| 2         | 2          | 2        | 450    | 2023-10-20  | PayPal          |
| 3         | 1          | 2        | 600    | 2023-11-05  | Debit Card      |

## Review

| ReviewID | TravelerID | TripID | HotelID | Rating | Feedback                                     |
|----------|------------|--------|---------|--------|----------------------------------------------|
| 1        | 1          | 1      | 1       | 4      | Great stay in Paris.                         |
| 2        | 2          | 2      | 2       | 5      | Loved Tokyo! Would visit again!              |
| 3        | 1          | 3      | 3       | 5      | NY Central was an amazing experience!        |

8.
User Information:

User ID -> User Name, Email, Password
Email -> User ID (assuming each email is unique)
Destination Information:

Destination ID -> Destination Name, Description, Travel Type
Destination Name -> Destination ID (assuming each destination has a unique name)
Hotel Information:

Hotel ID -> Hotel Name, Location, Price, Rating
Hotel Name -> Hotel ID (assuming each hotel has a unique name)
Tour Package Information:

Package ID -> Package Name, Description, Price
Package Name -> Package ID (assuming each package has a unique name)
User Choices:

User ID, Destination ID, Hotel ID, Package ID -> Check-in Date, Check-out Date, Total Price
User ID -> Destination ID, Hotel ID, Package ID (represents the choices made by the user)
These functional dependencies ensure the integrity and consistency of the database and provide information on how various data elements are related. For example:

User ID uniquely determines user-specific attributes such as the user's name and email.
Destination ID is a unique identifier for destinations, and Destination Name is also unique, so you can determine the name of a destination based on its ID.
Hotel ID uniquely identifies hotels, and Hotel Name is unique, so you can look up hotel details based on either the ID or the name.
Package ID is unique, and Package Name is unique, allowing you to identify package details using either.
User choices, which include user ID, destination ID, hotel ID, and package ID, determine related information such as check-in and check-out dates and total price.
These functional dependencies play a crucial role in maintaining data consistency, preventing redundancy, and helping the database management system enforce referential integrity constraints. Additionally, these dependencies facilitate efficient querying and retrieval of information for travelers looking to make decisions about their destinations, hotels, and tour packages.

9.
What are the available destinations for travelers to choose from?
Which hotels are available in a specific destination?
What are the different types of tour packages offered?
Can I see all the available hotels with their prices and ratings in a particular destination?
Which tour packages include a visit to a specific tourist attraction?
What is the total cost for a specific user's selected hotel and tour package?
Which users have booked a particular hotel or tour package?
What are the check-in and check-out dates for a user's booking?
How many users have booked a specific hotel or tour package?
What are the most popular destinations among travelers?
Can I see a list of users who have selected a specific destination for their trip?
What is the average price of hotels in a particular destination?
What are the most affordable tour packages available?
Which users have selected tour packages with a duration of more than one week?
Can I get a list of users who have made bookings for a specific date range?
What are the highest-rated hotels in a particular destination?
Which users have the highest total spending on their bookings?
How many bookings have been made for a specific hotel or tour package?
What are the top three destinations for users traveling with children?
Can I see the most expensive tour packages currently available?

```{mermaid}
gantt
  dateFormat  YYYY-MM-DD
    title       Adding GANTT diagram functionality to mermaid
    excludes    weekends
    %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week ("sunday") or "weekends", but not the word "weekdays".)

    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2              :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :1d
    Functionality added                 :milestone, 2014-01-25, 0d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      :20h
    Add another diagram to demo page    :48h
  ```